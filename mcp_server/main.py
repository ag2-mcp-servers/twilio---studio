# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:12:56+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Path, Query
from pydantic import conint, constr
from starlette.requests import Request

from models import (
    StudioV2Flow,
    StudioV2FlowExecution,
    StudioV2FlowExecutionExecutionContext,
    StudioV2FlowExecutionExecutionStep,
    StudioV2FlowExecutionExecutionStepExecutionStepContext,
    StudioV2FlowFlowRevision,
    StudioV2FlowTestUser,
    StudioV2FlowValidate,
    V2FlowsFlowSidExecutionsExecutionSidStepsGetResponse,
    V2FlowsFlowSidExecutionsGetResponse,
    V2FlowsGetResponse,
    V2FlowsSidRevisionsGetResponse,
)

app = MCPProxy(
    contact={
        'email': 'support@twilio.com',
        'name': 'Twilio Support',
        'url': 'https://support.twilio.com',
    },
    description='This is the public Twilio REST API.',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://www.twilio.com/legal/tos',
    title='Twilio - Studio',
    version='1.42.0',
    servers=[{'url': 'https://studio.twilio.com'}],
)


@app.get(
    '/v2/Flows',
    description=""" Retrieve a list of all Flows. """,
    tags=['flow_management', 'execution_instance_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_flow(
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Flows',
    description=""" Create a Flow. """,
    tags=['execution_instance_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_flow(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Flows/Validate',
    description=""" Validate flow JSON definition """,
    tags=['flow_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_flow_validate(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Flows/{FlowSid}/Executions',
    description=""" Retrieve a list of all Executions for the Flow. """,
    tags=['flow_management', 'execution_instance_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_execution(
    flow_sid: constr(
        pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='FlowSid'),
    date_created_from: Optional[datetime] = Query(None, alias='DateCreatedFrom'),
    date_created_to: Optional[datetime] = Query(None, alias='DateCreatedTo'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Flows/{FlowSid}/Executions',
    description=""" Triggers a new Execution for the Flow """,
    tags=['execution_instance_management', 'execution_step_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_execution(
    flow_sid: constr(
        pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='FlowSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Context',
    description=""" Retrieve the most recent context for an Execution. """,
    tags=['execution_instance_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_execution_context(
    flow_sid: constr(
        pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='FlowSid'),
    execution_sid: constr(
        pattern=r'^FN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ExecutionSid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps',
    description=""" Retrieve a list of all Steps for an Execution. """,
    tags=['execution_instance_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_execution_step(
    flow_sid: constr(
        pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='FlowSid'),
    execution_sid: constr(
        pattern=r'^FN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ExecutionSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{Sid}',
    description=""" Retrieve a Step. """,
    tags=['flow_management', 'execution_instance_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_execution_step(
    flow_sid: constr(
        pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='FlowSid'),
    execution_sid: constr(
        pattern=r'^FN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ExecutionSid'),
    sid: constr(pattern=r'^FT[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{StepSid}/Context',
    description=""" Retrieve the context for an Execution Step. """,
    tags=['execution_instance_management', 'execution_step_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_execution_step_context(
    flow_sid: constr(
        pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='FlowSid'),
    execution_sid: constr(
        pattern=r'^FN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ExecutionSid'),
    step_sid: constr(
        pattern=r'^FT[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='StepSid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/Flows/{FlowSid}/Executions/{Sid}',
    description=""" Delete the Execution and all Steps relating to it. """,
    tags=['flow_management', 'execution_instance_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_execution(
    flow_sid: constr(
        pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='FlowSid'),
    sid: constr(pattern=r'^FN[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Flows/{FlowSid}/Executions/{Sid}',
    description=""" Retrieve an Execution """,
    tags=['execution_instance_management', 'execution_step_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_execution(
    flow_sid: constr(
        pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='FlowSid'),
    sid: constr(pattern=r'^FN[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Flows/{FlowSid}/Executions/{Sid}',
    description=""" Update the status of an Execution to `ended`. """,
    tags=[
        'flow_management',
        'execution_instance_management',
        'execution_step_handling',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_execution(
    flow_sid: constr(
        pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='FlowSid'),
    sid: constr(pattern=r'^FN[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/Flows/{Sid}',
    description=""" Delete a specific Flow. """,
    tags=['execution_instance_management', 'execution_step_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_flow(
    sid: constr(pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Flows/{Sid}',
    description=""" Retrieve a specific Flow. """,
    tags=['test_user_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_flow(
    sid: constr(pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Flows/{Sid}',
    description=""" Update a Flow. """,
    tags=['test_user_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_flow(
    sid: constr(pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Flows/{Sid}/Revisions',
    description=""" Retrieve a list of all Flows revisions. """,
    tags=['execution_instance_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_flow_revision(
    sid: constr(pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Flows/{Sid}/Revisions/{Revision}',
    description=""" Retrieve a specific Flow revision. """,
    tags=['flow_management', 'execution_instance_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_flow_revision(
    sid: constr(pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    revision: str = Path(..., alias='Revision'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Flows/{Sid}/TestUsers',
    description=""" Fetch flow test users """,
    tags=['execution_instance_management', 'execution_step_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_test_user(
    sid: constr(pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Flows/{Sid}/TestUsers',
    description=""" Update flow test users """,
    tags=['execution_instance_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_test_user(
    sid: constr(pattern=r'^FW[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
